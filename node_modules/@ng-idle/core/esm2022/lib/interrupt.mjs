/*
 * A class for managing an interrupt from an interrupt source.
 */
export class Interrupt {
    constructor(source, options) {
        this.source = source;
        if (source.initialize) {
            source.initialize(options);
        }
    }
    /*
     * Subscribes to the interrupt using the specified function.
     * @param fn - The subscription function.
     */
    subscribe(fn) {
        this.sub = this.source.onInterrupt.subscribe(fn);
    }
    /*
     * Unsubscribes the interrupt.
     */
    unsubscribe() {
        this.sub.unsubscribe();
        this.sub = null;
    }
    /*
     * Keeps the subscription but resumes interrupt events.
     */
    resume() {
        this.source.attach();
    }
    /*
     * Keeps the subscription but pauses interrupt events.
     */
    pause() {
        this.source.detach();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJydXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zcmMvbGliL2ludGVycnVwdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQTs7R0FFRztBQUNILE1BQU0sT0FBTyxTQUFTO0lBR3BCLFlBQW1CLE1BQXVCLEVBQUUsT0FBMEI7UUFBbkQsV0FBTSxHQUFOLE1BQU0sQ0FBaUI7UUFDeEMsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDdEIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QixDQUFDO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNILFNBQVMsQ0FBQyxFQUFpQztRQUN6QyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxXQUFXO1FBQ1QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztJQUNsQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNO1FBQ0osSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLO1FBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN2QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgSW50ZXJydXB0QXJncyB9IGZyb20gJy4vaW50ZXJydXB0YXJncyc7XG5pbXBvcnQgeyBJbnRlcnJ1cHRPcHRpb25zIH0gZnJvbSAnLi9pbnRlcnJ1cHRvcHRpb25zJztcbmltcG9ydCB7IEludGVycnVwdFNvdXJjZSB9IGZyb20gJy4vaW50ZXJydXB0c291cmNlJztcblxuLypcbiAqIEEgY2xhc3MgZm9yIG1hbmFnaW5nIGFuIGludGVycnVwdCBmcm9tIGFuIGludGVycnVwdCBzb3VyY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnRlcnJ1cHQge1xuICBwcml2YXRlIHN1YjogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBzb3VyY2U6IEludGVycnVwdFNvdXJjZSwgb3B0aW9ucz86IEludGVycnVwdE9wdGlvbnMpIHtcbiAgICBpZiAoc291cmNlLmluaXRpYWxpemUpIHtcbiAgICAgIHNvdXJjZS5pbml0aWFsaXplKG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIC8qXG4gICAqIFN1YnNjcmliZXMgdG8gdGhlIGludGVycnVwdCB1c2luZyB0aGUgc3BlY2lmaWVkIGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0gZm4gLSBUaGUgc3Vic2NyaXB0aW9uIGZ1bmN0aW9uLlxuICAgKi9cbiAgc3Vic2NyaWJlKGZuOiAoYXJnczogSW50ZXJydXB0QXJncykgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMuc3ViID0gdGhpcy5zb3VyY2Uub25JbnRlcnJ1cHQuc3Vic2NyaWJlKGZuKTtcbiAgfVxuXG4gIC8qXG4gICAqIFVuc3Vic2NyaWJlcyB0aGUgaW50ZXJydXB0LlxuICAgKi9cbiAgdW5zdWJzY3JpYmUoKTogdm9pZCB7XG4gICAgdGhpcy5zdWIudW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLnN1YiA9IG51bGw7XG4gIH1cblxuICAvKlxuICAgKiBLZWVwcyB0aGUgc3Vic2NyaXB0aW9uIGJ1dCByZXN1bWVzIGludGVycnVwdCBldmVudHMuXG4gICAqL1xuICByZXN1bWUoKTogdm9pZCB7XG4gICAgdGhpcy5zb3VyY2UuYXR0YWNoKCk7XG4gIH1cblxuICAvKlxuICAgKiBLZWVwcyB0aGUgc3Vic2NyaXB0aW9uIGJ1dCBwYXVzZXMgaW50ZXJydXB0IGV2ZW50cy5cbiAgICovXG4gIHBhdXNlKCk6IHZvaWQge1xuICAgIHRoaXMuc291cmNlLmRldGFjaCgpO1xuICB9XG59XG4iXX0=