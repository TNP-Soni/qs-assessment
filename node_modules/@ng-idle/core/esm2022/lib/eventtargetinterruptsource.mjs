import { isPlatformServer } from '@angular/common';
import { Subscription, fromEvent, merge } from 'rxjs';
import { filter, throttleTime } from 'rxjs/operators';
import { InterruptArgs } from './interruptargs';
import { InterruptSource } from './interruptsource';
const defaultThrottleDelay = 500;
/*
 * An interrupt source on an EventTarget object, such as a Window or HTMLElement.
 */
export class EventTargetInterruptSource extends InterruptSource {
    constructor(target, events, opts) {
        super(null, null);
        this.target = target;
        this.events = events;
        this.opts = opts;
        this.eventSubscription = new Subscription();
        if (typeof this.opts === 'number') {
            this.opts = { throttleDelay: this.opts, passive: false };
        }
        this.opts = this.opts || {
            passive: false,
            throttleDelay: defaultThrottleDelay
        };
        if (this.opts.throttleDelay === undefined || this.opts.throttleDelay === null) {
            this.opts.throttleDelay = defaultThrottleDelay;
        }
        this.throttleDelay = this.opts.throttleDelay;
        this.passive = !!this.opts.passive;
    }
    initialize(options) {
        if (options?.platformId && isPlatformServer(options.platformId)) {
            return;
        }
        const eventTarget = typeof this.target === 'function' ? this.target() : this.target;
        const opts = this.passive ? { passive: true } : null;
        const fromEvents = this.events
            .split(' ')
            .map(eventName => fromEvent(eventTarget, eventName, opts));
        this.eventSrc = merge(...fromEvents);
        this.eventSrc = this.eventSrc.pipe(filter(innerArgs => !this.filterEvent(innerArgs)));
        if (this.throttleDelay > 0) {
            this.eventSrc = this.eventSrc.pipe(throttleTime(this.throttleDelay));
        }
        const handler = (innerArgs) => this.onInterrupt.emit(new InterruptArgs(this, innerArgs));
        this.attachFn = () => (this.eventSubscription = this.eventSrc.subscribe(handler));
        this.detachFn = () => this.eventSubscription.unsubscribe();
    }
    /*
     * Checks to see if the event should be filtered. Always returns false unless overriden.
     * @param event - The original event object.
     * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.
     */
    filterEvent(event) {
        return false;
    }
    /**
     * Returns the current options being used.
     * @return The current option values.
     */
    get options() {
        return {
            passive: this.passive,
            throttleDelay: this.throttleDelay
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnR0YXJnZXRpbnRlcnJ1cHRzb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9saWIvZXZlbnR0YXJnZXRpbnRlcnJ1cHRzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkQsT0FBTyxFQUFjLFlBQVksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRWhELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQWtCcEQsTUFBTSxvQkFBb0IsR0FBRyxHQUFHLENBQUM7QUFFakM7O0dBRUc7QUFDSCxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsZUFBZTtJQU03RCxZQUNZLE1BQW1ELEVBQ25ELE1BQWMsRUFDaEIsSUFBMkM7UUFFbkQsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUpSLFdBQU0sR0FBTixNQUFNLENBQTZDO1FBQ25ELFdBQU0sR0FBTixNQUFNLENBQVE7UUFDaEIsU0FBSSxHQUFKLElBQUksQ0FBdUM7UUFQN0Msc0JBQWlCLEdBQWlCLElBQUksWUFBWSxFQUFFLENBQUM7UUFXM0QsSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDbEMsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUMzRCxDQUFDO1FBRUQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJO1lBQ3ZCLE9BQU8sRUFBRSxLQUFLO1lBQ2QsYUFBYSxFQUFFLG9CQUFvQjtTQUNwQyxDQUFDO1FBRUYsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsS0FBSyxTQUFTLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEtBQUssSUFBSSxFQUFFLENBQUM7WUFDOUUsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsb0JBQW9CLENBQUM7UUFDakQsQ0FBQztRQUVELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDN0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDckMsQ0FBQztJQUVELFVBQVUsQ0FBQyxPQUEwQjtRQUNuQyxJQUFJLE9BQU8sRUFBRSxVQUFVLElBQUksZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7WUFDaEUsT0FBTztRQUNULENBQUM7UUFFRCxNQUFNLFdBQVcsR0FBRyxPQUFPLElBQUksQ0FBQyxNQUFNLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDcEYsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNyRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTTthQUMzQixLQUFLLENBQUMsR0FBRyxDQUFDO2FBQ1YsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLFdBQWtCLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNoQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FDbEQsQ0FBQztRQUNGLElBQUksSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUN2RSxDQUFDO1FBRUQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxTQUFjLEVBQUUsRUFBRSxDQUNqQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLGFBQWEsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUU1RCxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsRUFBRSxDQUNuQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRTlELElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzdELENBQUM7SUFFRDs7OztPQUlHO0lBQ08sV0FBVyxDQUFDLEtBQVU7UUFDOUIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsSUFBSSxPQUFPO1FBQ1QsT0FBTztZQUNMLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztZQUNyQixhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWE7U0FDbEMsQ0FBQztJQUNKLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzUGxhdGZvcm1TZXJ2ZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uLCBmcm9tRXZlbnQsIG1lcmdlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIHRocm90dGxlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgRXZlbnRUYXJnZXQgfSBmcm9tICcuL2V2ZW50dGFyZ2V0JztcbmltcG9ydCB7IEludGVycnVwdEFyZ3MgfSBmcm9tICcuL2ludGVycnVwdGFyZ3MnO1xuaW1wb3J0IHsgSW50ZXJydXB0T3B0aW9ucyB9IGZyb20gJy4vaW50ZXJydXB0b3B0aW9ucyc7XG5pbXBvcnQgeyBJbnRlcnJ1cHRTb3VyY2UgfSBmcm9tICcuL2ludGVycnVwdHNvdXJjZSc7XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgRXZlbnRUYXJnZXRJbnRlcnJ1cHRTb3VyY2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFdmVudFRhcmdldEludGVycnVwdE9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgdGhlIGV2ZW50cyBjb21pbmcgZnJvbSB0aGUgdGFyZ2V0LlxuICAgKi9cbiAgdGhyb3R0bGVEZWxheT86IG51bWJlcjtcblxuICAvKipcbiAgICogV2hldGhlciBvciBub3QgdG8gdXNlIHBhc3NpdmUgZXZlbnQgbGlzdGVuZXJzLlxuICAgKiBOb3RlOiB5b3UgbmVlZCB0byBkZXRlY3QgaWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgcGFzc2l2ZSBsaXN0ZW5lcnMsIGFuZCBvbmx5IHNldCB0aGlzIHRvIHRydWUgaWYgaXQgZG9lcy5cbiAgICovXG4gIHBhc3NpdmU/OiBib29sZWFuO1xufVxuXG5jb25zdCBkZWZhdWx0VGhyb3R0bGVEZWxheSA9IDUwMDtcblxuLypcbiAqIEFuIGludGVycnVwdCBzb3VyY2Ugb24gYW4gRXZlbnRUYXJnZXQgb2JqZWN0LCBzdWNoIGFzIGEgV2luZG93IG9yIEhUTUxFbGVtZW50LlxuICovXG5leHBvcnQgY2xhc3MgRXZlbnRUYXJnZXRJbnRlcnJ1cHRTb3VyY2UgZXh0ZW5kcyBJbnRlcnJ1cHRTb3VyY2Uge1xuICBwcml2YXRlIGV2ZW50U3JjOiBPYnNlcnZhYmxlPGFueT47XG4gIHByaXZhdGUgZXZlbnRTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgcHJvdGVjdGVkIHRocm90dGxlRGVsYXk6IG51bWJlcjtcbiAgcHJvdGVjdGVkIHBhc3NpdmU6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHRhcmdldDogRXZlbnRUYXJnZXQ8YW55PiB8ICgoKSA9PiBFdmVudFRhcmdldDxhbnk+KSxcbiAgICBwcm90ZWN0ZWQgZXZlbnRzOiBzdHJpbmcsXG4gICAgcHJpdmF0ZSBvcHRzPzogbnVtYmVyIHwgRXZlbnRUYXJnZXRJbnRlcnJ1cHRPcHRpb25zXG4gICkge1xuICAgIHN1cGVyKG51bGwsIG51bGwpO1xuXG4gICAgaWYgKHR5cGVvZiB0aGlzLm9wdHMgPT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLm9wdHMgPSB7IHRocm90dGxlRGVsYXk6IHRoaXMub3B0cywgcGFzc2l2ZTogZmFsc2UgfTtcbiAgICB9XG5cbiAgICB0aGlzLm9wdHMgPSB0aGlzLm9wdHMgfHwge1xuICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICB0aHJvdHRsZURlbGF5OiBkZWZhdWx0VGhyb3R0bGVEZWxheVxuICAgIH07XG5cbiAgICBpZiAodGhpcy5vcHRzLnRocm90dGxlRGVsYXkgPT09IHVuZGVmaW5lZCB8fCB0aGlzLm9wdHMudGhyb3R0bGVEZWxheSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5vcHRzLnRocm90dGxlRGVsYXkgPSBkZWZhdWx0VGhyb3R0bGVEZWxheTtcbiAgICB9XG5cbiAgICB0aGlzLnRocm90dGxlRGVsYXkgPSB0aGlzLm9wdHMudGhyb3R0bGVEZWxheTtcbiAgICB0aGlzLnBhc3NpdmUgPSAhIXRoaXMub3B0cy5wYXNzaXZlO1xuICB9XG5cbiAgaW5pdGlhbGl6ZShvcHRpb25zPzogSW50ZXJydXB0T3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zPy5wbGF0Zm9ybUlkICYmIGlzUGxhdGZvcm1TZXJ2ZXIob3B0aW9ucy5wbGF0Zm9ybUlkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGV2ZW50VGFyZ2V0ID0gdHlwZW9mIHRoaXMudGFyZ2V0ID09PSAnZnVuY3Rpb24nID8gdGhpcy50YXJnZXQoKSA6IHRoaXMudGFyZ2V0O1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLnBhc3NpdmUgPyB7IHBhc3NpdmU6IHRydWUgfSA6IG51bGw7XG4gICAgY29uc3QgZnJvbUV2ZW50cyA9IHRoaXMuZXZlbnRzXG4gICAgICAuc3BsaXQoJyAnKVxuICAgICAgLm1hcChldmVudE5hbWUgPT4gZnJvbUV2ZW50KGV2ZW50VGFyZ2V0IGFzIGFueSwgZXZlbnROYW1lLCBvcHRzKSk7XG4gICAgdGhpcy5ldmVudFNyYyA9IG1lcmdlKC4uLmZyb21FdmVudHMpO1xuICAgIHRoaXMuZXZlbnRTcmMgPSB0aGlzLmV2ZW50U3JjLnBpcGUoXG4gICAgICBmaWx0ZXIoaW5uZXJBcmdzID0+ICF0aGlzLmZpbHRlckV2ZW50KGlubmVyQXJncykpXG4gICAgKTtcbiAgICBpZiAodGhpcy50aHJvdHRsZURlbGF5ID4gMCkge1xuICAgICAgdGhpcy5ldmVudFNyYyA9IHRoaXMuZXZlbnRTcmMucGlwZSh0aHJvdHRsZVRpbWUodGhpcy50aHJvdHRsZURlbGF5KSk7XG4gICAgfVxuXG4gICAgY29uc3QgaGFuZGxlciA9IChpbm5lckFyZ3M6IGFueSkgPT5cbiAgICAgIHRoaXMub25JbnRlcnJ1cHQuZW1pdChuZXcgSW50ZXJydXB0QXJncyh0aGlzLCBpbm5lckFyZ3MpKTtcblxuICAgIHRoaXMuYXR0YWNoRm4gPSAoKSA9PlxuICAgICAgKHRoaXMuZXZlbnRTdWJzY3JpcHRpb24gPSB0aGlzLmV2ZW50U3JjLnN1YnNjcmliZShoYW5kbGVyKSk7XG5cbiAgICB0aGlzLmRldGFjaEZuID0gKCkgPT4gdGhpcy5ldmVudFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgLypcbiAgICogQ2hlY2tzIHRvIHNlZSBpZiB0aGUgZXZlbnQgc2hvdWxkIGJlIGZpbHRlcmVkLiBBbHdheXMgcmV0dXJucyBmYWxzZSB1bmxlc3Mgb3ZlcnJpZGVuLlxuICAgKiBAcGFyYW0gZXZlbnQgLSBUaGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0LlxuICAgKiBAcmV0dXJuIFRydWUgaWYgdGhlIGV2ZW50IHNob3VsZCBiZSBmaWx0ZXJlZCAoZG9uJ3QgY2F1c2UgYW4gaW50ZXJydXB0KTsgb3RoZXJ3aXNlLCBmYWxzZS5cbiAgICovXG4gIHByb3RlY3RlZCBmaWx0ZXJFdmVudChldmVudDogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgb3B0aW9ucyBiZWluZyB1c2VkLlxuICAgKiBAcmV0dXJuIFRoZSBjdXJyZW50IG9wdGlvbiB2YWx1ZXMuXG4gICAqL1xuICBnZXQgb3B0aW9ucygpOiBFdmVudFRhcmdldEludGVycnVwdE9wdGlvbnMge1xuICAgIHJldHVybiB7XG4gICAgICBwYXNzaXZlOiB0aGlzLnBhc3NpdmUsXG4gICAgICB0aHJvdHRsZURlbGF5OiB0aGlzLnRocm90dGxlRGVsYXlcbiAgICB9O1xuICB9XG59XG4iXX0=