import { EventEmitter, Injectable } from '@angular/core';
import { HttpRequest } from '@angular/common/http';
import { KeepaliveSvc } from '@ng-idle/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/**
 * An example of an injectable service.
 */
export class Keepalive extends KeepaliveSvc {
    /*
     * Initializes a new instance of Keepalive
     * @param http - The HTTP service.
     */
    constructor(http, zone) {
        super();
        this.http = http;
        this.zone = zone;
        this.pingInterval = 10 * 60;
        /*
         * An event emitted when the service is pinging.
         */
        this.onPing = new EventEmitter();
        /*
         * An event emitted when the service has pinged an HTTP endpoint and received a response.
         */
        this.onPingResponse = new EventEmitter();
    }
    /*
     * Sets the string or Request that should be used when pinging.
     * @param url - The URL or Request object to use when pinging.
     * @return The current Request used when pinging.
     */
    request(url) {
        if (typeof url === 'string') {
            this.pingRequest = new HttpRequest('GET', url);
        }
        else if (url instanceof HttpRequest) {
            this.pingRequest = url;
        }
        else if (url === null) {
            this.pingRequest = null;
        }
        return this.pingRequest;
    }
    /*
     * Sets the interval (in seconds) at which the ping operation will occur when start() is called.
     * @param seconds - The ping interval in seconds.
     * @return The current interval value.
     */
    interval(seconds) {
        if (!isNaN(seconds) && seconds > 0) {
            this.pingInterval = seconds;
        }
        else if (!isNaN(seconds) && seconds <= 0) {
            throw new Error('Interval value must be greater than zero.');
        }
        return this.pingInterval;
    }
    /*
     * Immediately performs the ping operation. If a request has been set, an HTTP
     * request will be made and the response will be emitted via the
     * onPingResponse event.
     */
    ping() {
        this.onPing.emit(null);
        if (this.pingRequest) {
            this.http.request(this.pingRequest).subscribe((response) => {
                this.onPingResponse.emit(response);
            }, (error) => {
                this.onPingResponse.emit(error);
            });
        }
    }
    /*
     * Starts pinging on an interval.
     */
    start() {
        this.stop();
        this.zone.runOutsideAngular(() => {
            this.pingHandle = setInterval(() => {
                this.zone.run(() => {
                    this.ping();
                });
            }, this.pingInterval * 1000);
        });
    }
    /*
     * Stops pinging on an interval.
     */
    stop() {
        if (this.hasPingHandle()) {
            clearInterval(this.pingHandle);
            this.pingHandle = null;
        }
    }
    /*
     * Performs any cleanup tasks when Angular destroys the instance.
     */
    ngOnDestroy() {
        this.stop();
    }
    /*
     * Returns whether or not the service will ping automatically at the specified interval.
     * @return True if the service will ping at the specified interval; otherwise, false.
     */
    isRunning() {
        return this.hasPingHandle();
    }
    hasPingHandle() {
        return this.pingHandle !== null && typeof this.pingHandle !== 'undefined';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.5", ngImport: i0, type: Keepalive, deps: [{ token: i1.HttpClient }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.5", ngImport: i0, type: Keepalive }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.5", ngImport: i0, type: Keepalive, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: i0.NgZone }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2VlcGFsaXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMva2VlcGFsaXZlL3NyYy9saWIva2VlcGFsaXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUM1RSxPQUFPLEVBQWMsV0FBVyxFQUFnQixNQUFNLHNCQUFzQixDQUFDO0FBQzdFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQUU3Qzs7R0FFRztBQUVILE1BQU0sT0FBTyxTQUFVLFNBQVEsWUFBWTtJQWlCekM7OztPQUdHO0lBQ0gsWUFBb0IsSUFBZ0IsRUFBVSxJQUFZO1FBQ3hELEtBQUssRUFBRSxDQUFDO1FBRFUsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUFVLFNBQUksR0FBSixJQUFJLENBQVE7UUFuQmxELGlCQUFZLEdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUd2Qzs7V0FFRztRQUNJLFdBQU0sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUV0RDs7V0FFRztRQUNJLG1CQUFjLEdBQW9DLElBQUksWUFBWSxFQUV0RSxDQUFDO0lBUUosQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxPQUFPLENBQUksR0FBNkI7UUFDdEMsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUUsQ0FBQztZQUM1QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksV0FBVyxDQUFJLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNwRCxDQUFDO2FBQU0sSUFBSSxHQUFHLFlBQVksV0FBVyxFQUFFLENBQUM7WUFDdEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUM7UUFDekIsQ0FBQzthQUFNLElBQUksR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDO1lBQ3hCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQzFCLENBQUM7UUFFRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxRQUFRLENBQUMsT0FBZ0I7UUFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDbkMsSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUM7UUFDOUIsQ0FBQzthQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQzNDLE1BQU0sSUFBSSxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQztRQUMvRCxDQUFDO1FBRUQsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBSTtRQUNGLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZCLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxTQUFTLENBQzNDLENBQUMsUUFBMkIsRUFBRSxFQUFFO2dCQUM5QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNyQyxDQUFDLEVBQ0QsQ0FBQyxLQUF3QixFQUFFLEVBQUU7Z0JBQzNCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xDLENBQUMsQ0FDRixDQUFDO1FBQ0osQ0FBQztJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUs7UUFDSCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFWixJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUMvQixJQUFJLENBQUMsVUFBVSxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtvQkFDakIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNkLENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxFQUFFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJO1FBQ0YsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQztZQUN6QixhQUFhLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQy9CLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLENBQUM7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxXQUFXO1FBQ1QsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVEOzs7T0FHRztJQUNILFNBQVM7UUFDUCxPQUFPLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRU8sYUFBYTtRQUNuQixPQUFPLElBQUksQ0FBQyxVQUFVLEtBQUssSUFBSSxJQUFJLE9BQU8sSUFBSSxDQUFDLFVBQVUsS0FBSyxXQUFXLENBQUM7SUFDNUUsQ0FBQzs4R0F0SFUsU0FBUztrSEFBVCxTQUFTOzsyRkFBVCxTQUFTO2tCQURyQixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbmplY3RhYmxlLCBOZ1pvbmUsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFJlcXVlc3QsIEh0dHBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEtlZXBhbGl2ZVN2YyB9IGZyb20gJ0BuZy1pZGxlL2NvcmUnO1xuXG4vKipcbiAqIEFuIGV4YW1wbGUgb2YgYW4gaW5qZWN0YWJsZSBzZXJ2aWNlLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgS2VlcGFsaXZlIGV4dGVuZHMgS2VlcGFsaXZlU3ZjIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBwaW5nUmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PjtcbiAgcHJpdmF0ZSBwaW5nSW50ZXJ2YWw6IG51bWJlciA9IDEwICogNjA7XG4gIHByaXZhdGUgcGluZ0hhbmRsZTogYW55O1xuXG4gIC8qXG4gICAqIEFuIGV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgc2VydmljZSBpcyBwaW5naW5nLlxuICAgKi9cbiAgcHVibGljIG9uUGluZzogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgLypcbiAgICogQW4gZXZlbnQgZW1pdHRlZCB3aGVuIHRoZSBzZXJ2aWNlIGhhcyBwaW5nZWQgYW4gSFRUUCBlbmRwb2ludCBhbmQgcmVjZWl2ZWQgYSByZXNwb25zZS5cbiAgICovXG4gIHB1YmxpYyBvblBpbmdSZXNwb25zZTogRXZlbnRFbWl0dGVyPEh0dHBSZXNwb25zZTxhbnk+PiA9IG5ldyBFdmVudEVtaXR0ZXI8XG4gICAgSHR0cFJlc3BvbnNlPGFueT5cbiAgPigpO1xuXG4gIC8qXG4gICAqIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIEtlZXBhbGl2ZVxuICAgKiBAcGFyYW0gaHR0cCAtIFRoZSBIVFRQIHNlcnZpY2UuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsIHByaXZhdGUgem9uZTogTmdab25lKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qXG4gICAqIFNldHMgdGhlIHN0cmluZyBvciBSZXF1ZXN0IHRoYXQgc2hvdWxkIGJlIHVzZWQgd2hlbiBwaW5naW5nLlxuICAgKiBAcGFyYW0gdXJsIC0gVGhlIFVSTCBvciBSZXF1ZXN0IG9iamVjdCB0byB1c2Ugd2hlbiBwaW5naW5nLlxuICAgKiBAcmV0dXJuIFRoZSBjdXJyZW50IFJlcXVlc3QgdXNlZCB3aGVuIHBpbmdpbmcuXG4gICAqL1xuICByZXF1ZXN0PFQ+KHVybD86IHN0cmluZyB8IEh0dHBSZXF1ZXN0PFQ+KTogSHR0cFJlcXVlc3Q8VD4ge1xuICAgIGlmICh0eXBlb2YgdXJsID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5waW5nUmVxdWVzdCA9IG5ldyBIdHRwUmVxdWVzdDxUPignR0VUJywgdXJsKTtcbiAgICB9IGVsc2UgaWYgKHVybCBpbnN0YW5jZW9mIEh0dHBSZXF1ZXN0KSB7XG4gICAgICB0aGlzLnBpbmdSZXF1ZXN0ID0gdXJsO1xuICAgIH0gZWxzZSBpZiAodXJsID09PSBudWxsKSB7XG4gICAgICB0aGlzLnBpbmdSZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5waW5nUmVxdWVzdDtcbiAgfVxuXG4gIC8qXG4gICAqIFNldHMgdGhlIGludGVydmFsIChpbiBzZWNvbmRzKSBhdCB3aGljaCB0aGUgcGluZyBvcGVyYXRpb24gd2lsbCBvY2N1ciB3aGVuIHN0YXJ0KCkgaXMgY2FsbGVkLlxuICAgKiBAcGFyYW0gc2Vjb25kcyAtIFRoZSBwaW5nIGludGVydmFsIGluIHNlY29uZHMuXG4gICAqIEByZXR1cm4gVGhlIGN1cnJlbnQgaW50ZXJ2YWwgdmFsdWUuXG4gICAqL1xuICBpbnRlcnZhbChzZWNvbmRzPzogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAoIWlzTmFOKHNlY29uZHMpICYmIHNlY29uZHMgPiAwKSB7XG4gICAgICB0aGlzLnBpbmdJbnRlcnZhbCA9IHNlY29uZHM7XG4gICAgfSBlbHNlIGlmICghaXNOYU4oc2Vjb25kcykgJiYgc2Vjb25kcyA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludGVydmFsIHZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucGluZ0ludGVydmFsO1xuICB9XG5cbiAgLypcbiAgICogSW1tZWRpYXRlbHkgcGVyZm9ybXMgdGhlIHBpbmcgb3BlcmF0aW9uLiBJZiBhIHJlcXVlc3QgaGFzIGJlZW4gc2V0LCBhbiBIVFRQXG4gICAqIHJlcXVlc3Qgd2lsbCBiZSBtYWRlIGFuZCB0aGUgcmVzcG9uc2Ugd2lsbCBiZSBlbWl0dGVkIHZpYSB0aGVcbiAgICogb25QaW5nUmVzcG9uc2UgZXZlbnQuXG4gICAqL1xuICBwaW5nKCk6IHZvaWQge1xuICAgIHRoaXMub25QaW5nLmVtaXQobnVsbCk7XG4gICAgaWYgKHRoaXMucGluZ1JlcXVlc3QpIHtcbiAgICAgIHRoaXMuaHR0cC5yZXF1ZXN0KHRoaXMucGluZ1JlcXVlc3QpLnN1YnNjcmliZShcbiAgICAgICAgKHJlc3BvbnNlOiBIdHRwUmVzcG9uc2U8YW55PikgPT4ge1xuICAgICAgICAgIHRoaXMub25QaW5nUmVzcG9uc2UuZW1pdChyZXNwb25zZSk7XG4gICAgICAgIH0sXG4gICAgICAgIChlcnJvcjogSHR0cFJlc3BvbnNlPGFueT4pID0+IHtcbiAgICAgICAgICB0aGlzLm9uUGluZ1Jlc3BvbnNlLmVtaXQoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qXG4gICAqIFN0YXJ0cyBwaW5naW5nIG9uIGFuIGludGVydmFsLlxuICAgKi9cbiAgc3RhcnQoKTogdm9pZCB7XG4gICAgdGhpcy5zdG9wKCk7XG5cbiAgICB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5waW5nSGFuZGxlID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnBpbmcoKTtcbiAgICAgICAgfSk7XG4gICAgICB9LCB0aGlzLnBpbmdJbnRlcnZhbCAqIDEwMDApO1xuICAgIH0pO1xuICB9XG5cbiAgLypcbiAgICogU3RvcHMgcGluZ2luZyBvbiBhbiBpbnRlcnZhbC5cbiAgICovXG4gIHN0b3AoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaGFzUGluZ0hhbmRsZSgpKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMucGluZ0hhbmRsZSk7XG4gICAgICB0aGlzLnBpbmdIYW5kbGUgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qXG4gICAqIFBlcmZvcm1zIGFueSBjbGVhbnVwIHRhc2tzIHdoZW4gQW5ndWxhciBkZXN0cm95cyB0aGUgaW5zdGFuY2UuXG4gICAqL1xuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnN0b3AoKTtcbiAgfVxuXG4gIC8qXG4gICAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHNlcnZpY2Ugd2lsbCBwaW5nIGF1dG9tYXRpY2FsbHkgYXQgdGhlIHNwZWNpZmllZCBpbnRlcnZhbC5cbiAgICogQHJldHVybiBUcnVlIGlmIHRoZSBzZXJ2aWNlIHdpbGwgcGluZyBhdCB0aGUgc3BlY2lmaWVkIGludGVydmFsOyBvdGhlcndpc2UsIGZhbHNlLlxuICAgKi9cbiAgaXNSdW5uaW5nKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmhhc1BpbmdIYW5kbGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFzUGluZ0hhbmRsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5waW5nSGFuZGxlICE9PSBudWxsICYmIHR5cGVvZiB0aGlzLnBpbmdIYW5kbGUgIT09ICd1bmRlZmluZWQnO1xuICB9XG59XG4iXX0=